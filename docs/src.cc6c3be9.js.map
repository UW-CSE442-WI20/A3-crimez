{"version":3,"sources":["index.js"],"names":["width","height","svg","d3","select","append","attr","projection","geoMercator","center","scale","translate","path","geoPath","inputValue","dates","data","map","colorScale","scaleThreshold","domain","range","schemePurples","boroughName","d","properties","BoroName","replace","tooltip","style","mouseOver","selectAll","transition","duration","event","pageY","pageX","text","months","toUpperCase","mouseMove","mouseOut","Promise","all","json","csv","then","reg","geo_data","crime_data","i","length","date","parts","split","month","name","initialDate","console","log","c","features","enter","on","update","value","document","getElementById","innerHTML","catch","err"],"mappings":"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","file":"src.cc6c3be9.js","sourceRoot":"../src","sourcesContent":["var width = 960, height = 500;\n\nsvg = d3.select(\"body\").append(\"svg\")\n\t.attr(\"width\", width)\n\t.attr(\"height\", height);\n\nvar projection = d3.geoMercator()\n\t.center([-73.94, 40.70])\n\t.scale(50000)\n\t.translate([(width) / 2, (height) / 2]);\n\nvar path = d3.geoPath()\n\t.projection(projection);\n\nvar inputValue = \"January\";\nvar dates = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\n// Data and color scale\nvar data = d3.map();\nvar colorScale = d3.scaleThreshold()\n\t.domain([1, 100, 1000, 3000, 6000])\n\t.range(d3.schemePurples[5]);\n\nvar boroughName = function(d) {\n\td.properties.BoroName.replace(/ /g, '');\n}\n\nvar tooltip = d3.select(\"body\")\n\t.append(\"div\")\n        .attr(\"class\", \"tooltip\")\n\t.style(\"position\", \"absolute\")\n\t.style(\"z-index\", \"10\")\n\t.style(\"visibility\", \"hidden\");\n\nlet mouseOver = function(d) {\n\td3.selectAll(\".Borough:not(#\" + boroughName(d)+ \")\")\n\t\t.transition()\n\t\t.duration(200)\n\t\t.style(\"opacity\", .2)\n\td3.select(this)\n\t\t.transition()\n\t\t.duration(200)\n\t\t.style(\"opacity\", 1)\n\t\t.style(\"stroke\", \"black\")\n\ttooltip.style(\"top\", (d3.event.pageY - 10) + \"px\")\n\t\t.style(\"left\", (d3.event.pageX + 10) + \"px\")\n\t\t.transition()\n\t\t.duration(200)\n\t        .style(\"visibility\", \"visible\")\n\t\t.text(d.properties.BoroName + \": \" +  months[inputValue][d.properties.BoroName.toUpperCase()] + \" crimes\");\n}\n\nlet mouseMove = function(d) {\n\td3.selectAll(\".Borough:not(#\" + boroughName(d) + \")\")\n\t\t.transition()\n\t\t.duration(200)\n\t\t.style(\"opacity\", 0.2)\n\t\t.style(\"stroke\", \"transparent\")\n\td3.select(this)\n\t\t.transition()\n\t\t.duration(200)\n\t\t.style(\"opacity\", 1)\n\t\t.style(\"stroke\", \"black\")\n\ttooltip.style(\"top\", (d3.event.pageY - 10) + \"px\")\n\t\t.style(\"left\", (d3.event.pageX + 10) + \"px\")\n\t\t.text(d.properties.BoroName + \": \" +  months[inputValue][d.properties.BoroName.toUpperCase()] + \" crimes\");\n}\n\nlet mouseOut = function(d) {\n\td3.selectAll(\".Borough\")\n\t\t.transition()\n\t\t.duration(100)\n\t\t.style(\"opacity\", 1)\n\t\t.style(\"stroke\", \"transparent\")\n\ttooltip.style(\"visibility\", \"hidden\")\n}\n\nPromise.all([\n\td3.json(\"./data/boroughs.geojson\"),\t\n\td3.csv(\"./data/nyc_crimez_filtered.csv\"),\n]).then(\n\t(data, reg) => {\n\t\tmonths = {}\n\t\tlet geo_data = data[0]\n\t\tlet crime_data = data[1]\n\n\t\tfor(var i = 0; i < crime_data.length; i++){\n            var date = crime_data[i][\"CMPLNT_FR_DT\"]\n            var parts = date.split(\"/\")\n            var month = dates[parts[0]-1]\n            var name = [crime_data[i][\"BORO_NM\"]]\n            if (months[month]) {\n                if (months[month][name]) {\n                    months[month][name] += 1\n                } else {\n                    months[month][name] = 1\n                }\n            } else {\n                months[month] = {}\n                months[month][name] = 1\n            }\n\t\t}\n\n\t\t// Draw the map\n\t\tsvg.append(\"g\")\n\t\t\t.selectAll(\"path\")\n\t\t\t.data(geo_data.features)\n\t\t\t.enter()\n\t\t\t.append(\"path\")\n\t\t\t// draw each country\n\t\t\t.attr(\"d\", d3.geoPath().projection(projection))\n\t\t        .attr(\"id\", (d) => boroughName(d))\n\t\n\t      // set the color of each country\n\t      .attr(\"fill\", function (d) {\n\t\t\t  //TODO: group by borough and count number of reports \n\t        // d.total = data.get(d.id) || 0;\n\t        return initialDate(d);\n\t\t  })\n\t\t  .attr(\"class\", function(d){ return \"Borough\" } )\n\t\t\t.on(\"mouseover\", mouseOver)\n\t\t\t.on(\"mousemove\", mouseMove)\n\t\t\t.on(\"mouseout\", mouseOut);\n\n\td3.select(\"#timeslide\").on(\"input\", function() {\n    \tupdate(+this.value);\n\t});\n\n\tfunction update(value) {\n    \tdocument.getElementById(\"range\").innerHTML=dates[value];\n    \tinputValue = dates[value];\n    \td3.selectAll(\".Borough\")\n        \t.attr(\"fill\", initialDate);\n\t}\n\n\tfunction initialDate(d){\n    \tvar name = d.properties.BoroName.toUpperCase();\n    \tconsole.log(months)\n\t\tvar c = months[inputValue][name];\n\t\treturn colorScale(c);\n\t}\n\n\t}).catch(function(err){\n\t\t\tconsole.log(err)\n\t\t}\n\t) \n"]}